package edu.sjsu.cmpe275.lab2;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.transaction.Transactional;
import java.text.*;

import java.sql.Date;
import java.util.*;




@RestController    // This means that this class is a Controller
@Transactional
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PassengerRepository passengerRepository;

    @Autowired
    private FlightRepository flightRepository;

    @Autowired
    private ReservationRepository reservationRepository;

    @Autowired
    private FlightPassengerRepository flightPassengerRepository;

    @Autowired
    private FlightReservationRepository flightReservationRepository;

    @RequestMapping(path="/passenger", method = RequestMethod.POST ) // CreatePassenger API
    public @ResponseBody ResponseEntity addNewPassenger (@RequestParam String firstname,
                                                 @RequestParam String lastname,
                                                 @RequestParam int age,
                                                 @RequestParam String gender,
                                                 @RequestParam String phone) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Passenger passenger = new Passenger();
        passenger.setFirstname(firstname);
        passenger.setLastname(lastname);
        passenger.setAge(age);
        passenger.setGender(gender);
        passenger.setPhone(phone);

        try {
            passengerRepository.save(passenger);
            return new ResponseEntity<Passenger>(passenger, HttpStatus.OK);
        } catch (Exception e) {
            ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, "Another passenger with the same number already exists.");
            return new ResponseEntity<Object>(apiError, HttpStatus.BAD_REQUEST);
        }
    }

    @RequestMapping(path = "/passenger/{id}", method = RequestMethod.GET) //GetPassengerById API
    public @ResponseBody ResponseEntity getPassengerById(@PathVariable("id") String passengerId) {
        Optional<Passenger> find_result = passengerRepository.findById(passengerId);

        try {
            Passenger passenger = find_result.get();
            Map<String, Passenger> jsonResult = new HashMap<>();
            jsonResult.put("passenger", passenger);
            return new ResponseEntity< Map<String, Passenger>>(jsonResult, HttpStatus.OK);
        } catch (NoSuchElementException e) {
            ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, "Passenger id cannot be found");
            return new ResponseEntity<Object>(apiError, HttpStatus.NOT_FOUND);
        }
    }

    @RequestMapping(value = "passenger/{id}", method = RequestMethod.PUT)//UpdatePassenger API
    public @ResponseBody ResponseEntity updatePassenger (@PathVariable("id") String passengerId,
                                                         @RequestParam String firstname,
                                                         @RequestParam String lastname,
                                                         @RequestParam int age,
                                                         @RequestParam String gender,
                                                         @RequestParam String phone){
        Optional<Passenger> find_result = passengerRepository.findById(passengerId);
        try{
                Passenger passenger = find_result.get();
                passenger.setFirstname(firstname);
                passenger.setLastname(lastname);
                passenger.setAge(age);
                passenger.setGender(gender);
                passenger.setPhone(phone);

                passengerRepository.save(passenger);
                return new ResponseEntity<Passenger>(passenger, HttpStatus.OK);
        } catch(NumberFormatException e){
                ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, "WRONG Parameter Type");
                return new ResponseEntity<Object>(apiError, HttpStatus.BAD_REQUEST);
            } catch(NoSuchElementException e){
            ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, "Passenger with id XXX does not exist");
            return new ResponseEntity<Object>(apiError, HttpStatus.NOT_FOUND);
        }
    }

    @RequestMapping(value = "passenger/{id}", method = RequestMethod.DELETE)//Delete Passenger
    public @ResponseBody ResponseEntity deletePassenger (@PathVariable("id") String passengerId) {
        Optional<Passenger> find_result = passengerRepository.findById(passengerId);

        try {
            Passenger passenger = find_result.get();
            passengerRepository.delete(passenger);
            return new ResponseEntity<Object>("Passenger with id XXX is deleted successfully", HttpStatus.OK);
        } catch (NoSuchElementException e) {
            ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, "Passenger with id XXX does not exist");
            return new ResponseEntity<Object>(apiError, HttpStatus.NOT_FOUND);
        }
    }

    @RequestMapping(path="/reservation", method = RequestMethod.POST)
    public @ResponseBody ResponseEntity addNewReservation(@RequestParam String passengerId,
                                                          @RequestParam String flightList){
        Optional<Passenger> find_result = passengerRepository.findById(passengerId);

        try {
            Passenger passenger = find_result.get();
            Reservation reservation = new Reservation();
            List<Flight> flights = reservation.getFlights();
            double payment = 0.0;
            for (Flight flight : flights) {
                payment += flight.getPrice();
                if(flight.getSeatsLeft() == 0){
                    ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST,"Sorry, no seat left");
                    return new ResponseEntity<Object>(apiError, HttpStatus.BAD_REQUEST);
                }else {
                    flight.setSeatsLeft(flight.getPlane().getCapacity() - 1);
                }
            }

            reservation.setPassenger(passenger);
            reservation.setPrice(payment);
            reservationRepository.save(reservation);

            FlightReservation flightReservation = new FlightReservation();

            String[] flightReservationList = flightList.split(",");
            for(int i = 0; i < flightReservationList.length; i++){
                flightReservation.setFlightNumber(flightReservationList[i]);
                flightReservation.setReservationNumber(reservation.getReservationNumber());
            }
            flightReservationRepository.save(flightReservation);

            FlightPassenger flightPassenger = new FlightPassenger();
            for(int i = 0; i < flightReservationList.length; i++){
                flightPassenger.setFlightNumber(flightReservationList[i]);
                flightPassenger.setPassengerID(passengerId);
            }
            flightPassengerRepository.save(flightPassenger);
            return new ResponseEntity<Reservation>(reservation, HttpStatus.OK);

        }catch(Exception e){
            ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, "Sorry there are some problem happened");
            return new ResponseEntity<Object>(apiError, HttpStatus.BAD_REQUEST);
        }
    }

    @RequestMapping(path = "/reservation/{reservationNumber}", method = RequestMethod.GET)
    public @ResponseBody ResponseEntity getReservationByReservationNumber(@PathVariable("reservationNumber") String reservationNumber){
        Optional<Reservation> find_result = reservationRepository.findById(reservationNumber);
        try {
            Reservation reservation = find_result.get();
            Map<String, Reservation> jsonResult = new HashMap<>();
            jsonResult.put("reservation", reservation);
            return new ResponseEntity< Map<String, Reservation>>(jsonResult, HttpStatus.OK);
        } catch (NoSuchElementException e) {
            ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, "Reservation number cannot be found");
            return new ResponseEntity<Object>(apiError, HttpStatus.NOT_FOUND);
        }
    }

//    @RequestMapping(path = "/reservation", method = RequestMethod.GET)
//    public @ResponseBody ResponseEntity getReservationByOtherInformation(@RequestParam String passengerId,
//                                                                         @RequestParam String origin,
//                                                                         @RequestParam String to,
//                                                                         @RequestParam String flightNumber){
//
//    }

    @RequestMapping(path = "/reservation/{reservationNumber}", method = RequestMethod.DELETE)
    public @ResponseBody ResponseEntity deleteReservation(@PathVariable("reservationNumber") String reservationNumber){
        Optional<Reservation> find_result = reservationRepository.findById(reservationNumber);
        try{
            Reservation reservation = find_result.get();
            reservationRepository.delete(reservation);
            return new ResponseEntity<Object>("Reservation with Number XXX is deleted successfully", HttpStatus.OK);
        }catch(NoSuchElementException e) {
            ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, "Reservation Number cannot be found");
            return new ResponseEntity<Object>(apiError, HttpStatus.NOT_FOUND);
        }

    }

    @RequestMapping(path="/flight/{flightNumber}", method = RequestMethod.POST) //Create/UpdateFlight API
    public @ResponseBody ResponseEntity addOrUpdateFlight(@PathVariable String flightNumber,
                                                     @RequestParam double price,
                                                     @RequestParam String origin,
                                                     @RequestParam String to,
                                                     @RequestParam String departureTime,
                                                     @RequestParam String arrivalTime,
                                                     @RequestParam String description,
                                                     @RequestParam int capacity,
                                                     @RequestParam String model,
                                                     @RequestParam String manufacturer,
                                                     @RequestParam int year){

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH");
        try{
            java.util.Date departure = dateFormat.parse(departureTime);
            java.util.Date arrival = dateFormat.parse(arrivalTime);

            Flight flight = new Flight();

            flight.setArrivalTime(arrival);
            flight.setDepartureTime(departure);

            if((departure).compareTo(arrival)>0){
                ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, "Departure time cannot earlier than arrival time");
                return new ResponseEntity<Object>(apiError, HttpStatus.BAD_REQUEST);
            }

            flight.setFlightNumber(flightNumber);
            flight.setDescription(description);
            flight.setOrigin(origin);
            flight.setTo(to);
            flight.setPrice(price);
            Plane plane = new Plane();
            plane.setCapacity(capacity);
            plane.setManufacturer(manufacturer);
            plane.setModel(model);
            plane.setYear(year);
            flight.setPlane(plane);
            flightRepository.save(flight);
            return new ResponseEntity<Flight>(flight, HttpStatus.OK);
        }catch(NumberFormatException e){
            ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, "Flight data format error");
            return new ResponseEntity<Object>(apiError, HttpStatus.BAD_REQUEST);

        }catch(ParseException e){
            ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, "Flight time format Error");
            return new ResponseEntity<Object>(apiError, HttpStatus.BAD_REQUEST);
        }
    }



    @RequestMapping(path = "/flight/{flightNumber}", method = RequestMethod.GET)
    public @ResponseBody ResponseEntity getFlightByFlightNumber(@PathVariable("flightNumber") String flightNumber){
        Optional<Flight> find_result = flightRepository.findById(flightNumber);

        try {
            Flight flight = find_result.get();
            return new ResponseEntity<Flight>(flight, HttpStatus.OK);
        } catch (NoSuchElementException e) {
            ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, "Flight Number cannot be found");
            return new ResponseEntity<Object>(apiError, HttpStatus.NOT_FOUND);
        }
    }

    @RequestMapping(path = "/flight/{flightNumber}", method = RequestMethod.DELETE)
    public @ResponseBody ResponseEntity deleteFlightByFlightNumber(@PathVariable("flightNumber") String flightNumber){
        Optional<Flight> find_result = flightRepository.findById(flightNumber);
        try {
            Flight flight = find_result.get();
            if (flight.getReservations() !=null){
                ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, "Sorry, the flight still has reservation, interrupt delete action");
                return new ResponseEntity<Object>(apiError, HttpStatus.BAD_REQUEST);
            }else {
                flightRepository.delete(flight);
                return new ResponseEntity<Object>("Flight with flightnumber XXX is deleted successfully", HttpStatus.OK);
            }
        } catch (NoSuchElementException e) {
            ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, "Flight with id XXX does not exist");
            return new ResponseEntity<Object>(apiError, HttpStatus.NOT_FOUND);
        }
    }



}